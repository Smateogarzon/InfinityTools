# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Location {
  _id: String!
  tel: String!
  zipCode: String!
  address: String!
  city: String!
  state: String!
}

type User {
  _id: String!
  firtsName: String
  MiddleName: String
  lastName: String
  MiddleLastName: String
  email: String
  password: String
  rol: UserRol!
  gender: UserGender
  location: Location
  suscribe: Boolean
  status: UserStatus!
  picture: String
  salesHistory: String!
  reviews: String!
  shoppingCart: String
  orders: String!
  date: DateTime!
  completeName: String
}

enum UserRol {
  ADMIN
  USER
  DISTRIBUTOR
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginationUser {
  users: [User!]
  total: Int
}

type Category {
  _id: String!
  name: String!
  subcategory: [String!]!
  products: [String!]
}

type Subcategory {
  _id: String!
  name: String!
  category: String!
  products: [String!]!
}

type Brand {
  _id: String!
  name: String!
  products: [String!]
}

type Product {
  _id: String!
  name: String!
  description: String!
  purchasePrice: Float!
  sellingPrice: Float!
  referencePrice: Float
  distributorPrice: Float!
  referencePriceDistributor: Float!
  category: Category
  subcategory: Subcategory
  picture: String!
  extraPicture: [String!]!
  brand: Brand
  reviews: [String!]!
  NumberReviews: Int!
  salesNumber: Int
  status: Boolean!
}

type ResponseCategory {
  nameCategory: String!
  subcategories: [String!]!
}

type ProductCart {
  idProduct: String
  priceProduct: Float
  quantity: Float
  total: Float
}

type ProductsCart {
  _id: String
  delited: Boolean
  totalItems: Float
  user: User
  products: [ProductCart!]
  date: DateTime!
  status: Boolean!
  total: Float
  sendVideo: Boolean!
}

type Query {
  FindAllusers(numPage: Int!): PaginationUser!
  FindOneuser(id: String!): User!
  FindUserQuery(filter: FindUserInput!, numPage: Int!): PaginationUser!
  LogIn(email: String!, password: String!): User!
  AllLocation: [Location!]!
  location(id: Int!): Location!
  allProducts: [Product!]!
  FindOneproduct(id: String!): Product!
  FindAllproductsFilter(filter: Filters!): [Product!]!
  FindDescountProduct(filter: String!): [Product!]!
  FindMoreSales: [Product!]!
  brands: [Brand!]!
  allCategories: [Category!]!
  categoryRender: [ResponseCategory!]!
  allSubcategories(id: String!): [Subcategory!]!
  FindCart: ProductsCart!
  FindCartById(id: String!): ProductsCart!
}

input FindUserInput {
  name: String
  status: UserStatus
  register: String
  rol: UserRol
  gender: UserGender
  city: String
}

input Filters {
  name: String
  category: String
  sellingPrice: String
  brand: String
  salesNumber: String
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  createUserLocation(create: CreateLocationInput!): User!
  UpdateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: String!): User!
  updateLocation(updateLocationInput: UpdateLocationInput!): Location!
  removeLocation(id: Int!): Location!
  createProduct(image: Upload!, arrayFiles: [Upload!]!, createProductInput: CreateProductInput!): Product!
  updateProduct(image: Upload, filesCompare: [String!], arrayFiles: [Upload!], updateProductInput: UpdateProductInput!): Product!
  updateProductStatus(updateProductStatusInput: UpdateProductInput!): Product!
  deleteProduct(id: String!): Product!
  createBrand(createBrandInput: CreateBrandInput!): Brand!
  updateBrand(id: String!, updateBrandInput: UpdateBrandInput!): Brand!
  deleteBrand(id: String!): Brand!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(id: String!, updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: String!): Category!
  createSubCategory(createCategoryInput: CreateCategoryInput!, id: String!): Category!
  clearSubcategory(id: String!, categoryId: String!): Subcategory!
  addProductToCart(createShoppingCartInput: CreateShoppingCartInput!): ProductsCart!
  updateProductToCart(createShoppingCartInput: CreateShoppingCartInput!): ProductsCart!
  remove(id: String!): ProductsCart!
}

input CreateUserInput {
  firtsName: String
  MiddleName: String
  lastName: String
  MiddleLastName: String
  email: String!
  password: String
  gender: UserGender
  suscribe: Boolean
  picture: String
  rol: UserRol
  status: UserStatus
}

input CreateLocationInput {
  tel: String!
  zipCode: Int!
  address: String!
  city: String!
  state: String!
  userId: String
}

input UpdateUserInput {
  firtsName: String
  MiddleName: String
  lastName: String
  MiddleLastName: String
  email: String
  password: String
  gender: UserGender
  suscribe: Boolean
  picture: String
  rol: UserRol
  status: UserStatus
}

input UpdateLocationInput {
  tel: String
  zipCode: Int
  address: String
  city: String
  state: String
  userId: String
  id: Int!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateProductInput {
  name: String!
  description: String!
  purchasePrice: Float
  sellingPrice: Float
  referencePrice: Float
  category: String
  subcategory: String
  brand: String
}

input UpdateProductInput {
  name: String
  description: String
  purchasePrice: Float
  sellingPrice: Float
  referencePrice: Float
  category: String
  subcategory: String
  brand: String
  _id: String!
  status: Boolean
}

input CreateBrandInput {
  name: String!
}

input UpdateBrandInput {
  name: String!
}

input CreateCategoryInput {
  name: String
}

input UpdateCategoryInput {
  name: String
}

input CreateShoppingCartInput {
  idProduct: String!
  priceProduct: Float
  quantity: Float!
  total: Float
}