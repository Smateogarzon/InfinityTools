# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Location {
  _id: String!
  tel: String!
  zipCode: String!
  address: String!
  city: String!
  state: String!
}

type User {
  _id: String!
  firtsName: String
  MiddleName: String
  lastName: String
  MiddleLastName: String
  email: String
  password: String
  rol: UserRol!
  gender: UserGender
  location: Location
  suscribe: Boolean
  status: UserStatus!
  picture: String
  salesHistory: String!
  reviews: String!
  shoppingCart: String!
  orders: String!
  date: DateTime!
  completeName: String
}

enum UserRol {
  ADMIN
  USER
  DISTRIBUTOR
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginationUser {
  users: [User!]
  total: Int
}

type Category {
  name: String!
  subcategory: [String!]!
  products: [String!]
}

type Subcategory {
  name: String!
  category: String!
}

type Product {
  name: String!
  description: String!
  purchasePrice: Float!
  sellingPrice: Float!
  referencePrice: Float!
  distributorPrice: Float!
  referencePriceDistributor: Float!
  category: Category!
  subcategory: Subcategory!
  picture: String!
  brand: String!
  reviews: [String!]!
  salesNumber: Int!
  status: Boolean!
}

type Brand {
  name: String!
  products: [String!]
}

type Query {
  FindAllusers(numPage: Int!): PaginationUser!
  FindOneuser(id: String!): User!
  FindUserQuery(filter: FindUserInput!, numPage: Int!): PaginationUser!
  LogIn(email: String!, password: String!): User!
  AllLocation: [Location!]!
  location(id: Int!): Location!
  brands: [Brand!]!
}

input FindUserInput {
  name: String
  status: UserStatus
  register: String
  rol: UserRol
  gender: UserGender
  city: String
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  createUserLocation(create: CreateLocationInput!): User!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): User!
  removeUser(id: String!): User!
  updateLocation(updateLocationInput: UpdateLocationInput!): Location!
  removeLocation(id: Int!): Location!
  createProduct(image: Upload!, arrayFiles: [Upload!]!): Product!
  createBrand(CreateBrandInput: CreateBrandInput!): Brand!
  updateBrand(id: String!, updateBrandInput: UpdateBrandInput!): Brand!
  deleteBrand(id: String!): Brand!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(id: String!, updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: String!): Category!
  createSubCategory(createCategoryInput: CreateCategoryInput!, id: String!): Category!
}

input CreateUserInput {
  firtsName: String
  MiddleName: String
  lastName: String
  MiddleLastName: String
  email: String!
  password: String
  gender: UserGender
  suscribe: Boolean
  picture: String
  rol: UserRol
  status: UserStatus
}

input CreateLocationInput {
  tel: String!
  zipCode: Int!
  address: String!
  city: String!
  state: String!
  userId: String
}

input UpdateUserInput {
  firtsName: String
  MiddleName: String
  lastName: String
  MiddleLastName: String
  email: String
  password: String
  gender: UserGender
  suscribe: Boolean
  picture: String
  rol: UserRol
  status: UserStatus
}

input UpdateLocationInput {
  tel: String
  zipCode: Int
  address: String
  city: String
  state: String
  userId: String
  id: Int!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateBrandInput {
  name: String!
}

input UpdateBrandInput {
  name: String!
}

input CreateCategoryInput {
  name: String
}

input UpdateCategoryInput {
  name: String
}