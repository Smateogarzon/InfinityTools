# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Location {
  _id: String!
  tel: String!
  zipCode: String!
  address: String!
  city: String!
  state: String!
}

type User {
  _id: String!
  firtsName: String
  MiddleName: String
  lastName: String
  MiddleLastName: String
  email: String
  password: String
  rol: UserRol!
  gender: UserGender
  location: Location
  suscribe: Boolean
  status: UserStatus!
  picture: String
  salesHistory: String!
  reviews: String!
  shoppingCart: String!
  orders: String!
  date: DateTime!
  completeName: String
}

enum UserRol {
  ADMIN
  USER
  DISTRIBUTOR
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginationUser {
  users: [User!]
  total: Int
}

type Product {
  name: String!
  description: String!
  purchasePrice: Float!
  sellingPrice: Float!
  referencePrice: Float!
  distributorPrice: Float!
  referencePriceDistributor: Float!
  category: [String!]!
  picture: String!
  stock: Int!
  brand: String!
  shoppingCart: [String!]!
  reviews: [String!]!
  salesNumber: Int!
}

type Query {
  FindAllusers(numPage: Int!): PaginationUser!
  FindOneuser(id: String!): User!
  FindUserQuery(filter: FindUserInput!, numPage: Int!): PaginationUser!
  LogIn(email: String!, password: String!): User!
  AllLocation: [Location!]!
  location(id: Int!): Location!
}

input FindUserInput {
  name: String
  status: UserStatus
  register: String
  rol: UserRol
  gender: UserGender
  city: String
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  createUserLocation(create: CreateLocationInput!): User!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): User!
  removeUser(id: String!): User!
  updateLocation(updateLocationInput: UpdateLocationInput!): Location!
  removeLocation(id: Int!): Location!
  createProduct(createProductInput: CreateProductInput!): Product!
}

input CreateUserInput {
  firtsName: String
  MiddleName: String
  lastName: String
  MiddleLastName: String
  email: String!
  password: String
  gender: UserGender
  suscribe: Boolean
  picture: String
  rol: UserRol
  status: UserStatus
}

input CreateLocationInput {
  tel: String!
  zipCode: Int!
  address: String!
  city: String!
  state: String!
  userId: String
}

input UpdateUserInput {
  firtsName: String
  MiddleName: String
  lastName: String
  MiddleLastName: String
  email: String
  password: String
  gender: UserGender
  suscribe: Boolean
  picture: String
  rol: UserRol
  status: UserStatus
}

input UpdateLocationInput {
  tel: String
  zipCode: Int
  address: String
  city: String
  state: String
  userId: String
  id: Int!
}

input CreateProductInput {
  name: String!
  description: String!
  purchasePrice: Float
  sellingPrice: Float
  referencePrice: Float
  distributorPrice: Float
  referencePriceDistributor: Float
  category: [String!]
  picture: String
  stock: Int!
  brand: String
}